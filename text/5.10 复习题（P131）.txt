1. 假设所有变量的类型都是int，下列各项变量的值是多少？
	a. x = (2+3) * 6
	b. x = (12 +6)/2*3
	c. y = x = (2+3)/4
	d. y = 3 +2 * (x = 7/2)

	a. 30		b. 27 		c. 1		d. 9
答案：	a. 30		b. 27(不是3）。 （12+6）/ （2*3）		c. x = 1, y = 1（整数除法）	d. x = 3（整数除法）, y = 9



2. 假设所有变量的类型都是int，下列各项变量的值是多少？
	a. x = (int) 3.8+3.3
	b. x = (2+3) *10.5
	c. x = 3/5 *22.0
	d. x = 22.0 * 3 /5
	
	a. 6 		b. 52 		c. 0 		d. 13
答案： 	a. 6（由3+3.3截断而来）		b. 52   		c. 0(0*22.0的结果)		d. 13（66.0/5或13.2, 然后把结果赋给int类型变量）



3. 对下列各表达式求值：
	a. 30.0 / 4.0 * 5.0
	b. 30.0 / (4.0 *5.0)
	c. 30 / 4*5
	d. 30 * 5 / 4
	e. 30 / 4.0 * 5
	f. 30 / 4 *5.0

	a. 37.5 		b. 1.5		c. 40		d. 38 		e. 37.5		f. 40.0
答案： 	a. 37.5(7.5*5.0的结果)	b. 1.5 (30.0/20.0的结果)	c. 35 （7*5的结果）		d. 37 (150/4的结果)		e. 37.5(7.5*5的结果）	f. 35.0(7*5.0的结果)



4. 请找出下面的程序中的错误。
	int main(void)
	{
		int i = 1，
		float n;
		printf("Watch out! Here come a bunch of fractions! \n");
		while (i<30)
			n = 1/i;
			printf("  %f", n);
		printf("That's all, folks!\n");
		return;
	}

	应改为：
	#include <stdio.h>
	int main(void)
	{
		int i = 1;
		float n;
		
		printf("Watch out! Here come a bunch of fractions!\n");
		while (i++ < 30)
		{
			n = 1/i;
			printf("  %f", n);
		}
		printf("That's all, folks!\n");
		return 0;
	}

答案：	第0行：应增加一行#include <stdio.h>
	第3行：末尾用分号，而不是逗号。
	第6行：while语句创建了一个无限循环。因为i的值始终为1，所以它总是小于30。推测一下，应该是想写while (i++<30)。
	第6~8行：这样的缩进布局不能使第7行和第8行组成一个代码块。由于没有用花括号括起来，while循环只包括第7行，所以要添加花括号。
	第7行：因为1和i都是整数，所以当i为1时，除法的结果是1；当i为更大的数时，除法结果为0。用n = 1.0/i，i在除法运算之前会被转换为浮点数，这样就能得到非零值。
	第8行：在格式化字符串中没有转换符（\n），这导致数字被打印成一行。
	下面是正确的版本：
	#include <stdio.h>
	int main(void)
	{
		int i = 1;
		float n;
		printf("Watch out! Here come a bunch of fractions!\n");
		while (i++<30)
		{
			n = 1.0/1;
			printf(" %f\n", n);
		}
		printf("That's all.\n");
		return 0;
	}

5. 这是程序清单 5.9 的另一个版本。从表面上看，该程序只使用了一条 scanf() 语句，比程序清单 5.9 简单。请找出不如原版之处。
	#include <stdio.h>
	#define S_TO_M 60
	{
		int sec, min, left;

		printf("This program converts secons to minutes and ");
		printf("seconds.\n");
		printf("Just enter the number of seconds.\n");
		printf("Enter 0 to end the program.\n");
		while (sec>0){
			scanf ("%d", &sec);
			min  = sec/S_TO_M;
			left  = sec % S_TO_M;
			printf("%d sec is %d min, %d sec. \n", sec, min, left);
			printf("Next input?\n");
		}
		printf("Bye! \n");
		return 0;
	}

	不如原版处：1. while语句前没有给sec赋值，所以无法进入while以下的语句。 2. 循环语句结束后也没有scanf()语句给sec赋值。 3. 程序运行只能是显示文字然后退出。
答案：	这个版本最大的问题是测试条件（sec是否大于0？）和scanf( ) 语句获取sec变量的值之间的关系。具体地说，第一次测试时，程序尚未获得sec的值，用来与0作比较的正好在sec变量内存位置上的一个垃圾值。一个比较笨拙地方法是初始化sec（如，初始化为1）。这样就可通过第一次测试。不过，还有另一个问题。当最后输入0结束程序时，在循环结束之前不会检查sec，所以0也被打印了出来。因此，更好的方法是在while测试之前使用scanf（）语句。可以这样修改：
scanf("%d", &sec);
while (sec>0)
{
	min = sec/S_PER_M;
	left = sec%S_TO_M;
	printf("%d sec is %d min, %d sec.\n", sec, min, left);
	scanf("%d", &sec);
}
while循环第一轮迭代使用的是scanf（）在循环外面获取的值。因此，在while循环的末尾还要使用一次scanf()语句。这是处理类似问题的常用方法。




6. 下面的程序将打印出什么内容？
	#include <stdio.h>
	#define FORMAT "%s! C is cool!\n"
	int main(void)
	{
		int num = 10;
		
		printf(FORMAT, FORMAT);
		printf("%d\n", ++num);
		printf("%d\n", num++);
		printf("%d\n", num--);
		printf("%d\n", num);
		return 0;
	}

	输出：
	第一条不知道
	11
	11
	12
	11
答案：下面是改程序的输出：
	%s! C is cool!
	! C is cool!
	11
	11
	12
	11
	解释一下。第一个printf()语句与下面的语句相同：
	printf("%s! C is cool!\n", "%s! C is cool!\n");
	第2个printf（）语句首先把num递增为11，然后打印该值。第3个printf()语句打印num的值（值为11）。第4个printf()语句打印n当前的值（仍为12），然后将其递减为11。最后一个printf()语句打印num的当前值（值为11）。



7. 下面的程序将打印出什么内容？
	#include <stdio.h>
	int main(void)
	{
		char c1, c2;
		int diff;
		float num;

		c1 = 'S';
		c2 = 'O';
		diff = c1 - c2;
		num = diff;
		printf("%c%c%c: %d %3.2f\n", c1, c2, diff, num);
		return 0;
	}

	输出：
	SOS: 4  4.00
答案：下面是该程序的输出：
	SOS: 4 4.00
	表达式c1-c2的值和'S' - 'O'的值相同（其对应的ASCII值是83 - 79）。


8. 下面的程序将打印出什么内容？
	#include <stdio.h>
	#define TEN 10
	int main(void)
	{
		int n = 0;

		while (n++<TEN)
			printf("%5d", n);
		printf("\n");
		return 0;
	}

	输出：
	    1    2    3    4    5    6    7    8    9   10
答案：把1~10打印在一行，每个数字占5列宽度，然后开始新的一行：
	    1    2    3    4    5    6    7    8    9   10



9. 修改上面一个程序，使其可以打印字母a~g。
	//a = 97   g = 103
	#include <stdio.h>
	#define LIMIT 103
	int main(void)
	{
		int n = 96;

		while (n++<LIMIT)
			printf("%5c", n);
		printf("\n");
		return 0;
	}
答案：下面是一个参考程序，假定字母连续编码，与ASCII中的情况一样。
	#include <stdio.h>
	
	int main(void)
	{
		cha ch = 'a';
		while (ch <= 'g')
			printf("%5c",ch++);
		printf("\n");
		return 0;
	}





10. 假设下面是完整程序中的一部分，它们分别打印什么？
	a.
		int x = 0;
		
		while (++x<3)
			printf("%4d", x);
	b. 
		int x = 100;
		
		while (x++<103);
			printf("%4d\n", x);
			printf("%4d\n", x);
	c. 
		char ch = 's';
		
		while (ch < 'w')
		{
			printf("%c", ch);
			ch++
		}
		printf("%c\n", ch);

	输出：
	a.    1   2
	b.  101 102
	c. stuvw
答案：下面是每个部分的输出：
	a.    1   2
	注意，先递增x的值再比较。光标仍留在同一行。
	b.  101
	     102
	     103
	     104
	注意，这x先比较后递增。在示例a和b中，x都是在先递增后打印。另外还要注意，虽然第2个printf()语句缩进了，但是这并不意味着它是while循环的一部分。因此，再while循环结束后，才会调用一次该printf()语句。
	c. stuvw
	该例中，在第1次调用printf()语句后才会递增ch。



11. 下面的程序会打印出什么？
	#define MESG "COMPUTER BYTES DOG"
	#include <stdio.h>
	int main(void)
	{
		int n = 0;

		while (n < 5)
			printf("%s\n", MESG);
			n++;
		printf("That's all.\n");
		return 0;
	}

	输出:
	COMPUTER BYTES DOG
	COMPUTER BYTES DOG
	COMPUTER BYTES DOG
	COMPUTER BYTES DOG
	COMPUTER BYTES DOG
	That's all.
答案：这个程序有点问题，while循环没有用花括号把两个缩进的语句括起来，只有printf()是循环的一部分，所以该程序一直重复打印消息COMPUTER BYTES DOG，直到强行关闭程序为止。



12. 分别编写一条语句，完成下列各任务（或者说，使其具有以下副作用）：
	a. 将变量x的值增加10
	b. 将变量x的值增加1
	c. 将a与b之和的两倍赋给c
	d. 将a与b的两倍之和赋给c

	a. x = x + 10		b. x += 1			c. c = 2 * (a+b)		d. c = 2*a + 2*b
答案：d. c = a + b*2	其他略。



13. 分别编写一条语句，完成下列各任务：
	a. 将变量x的值减少1
	b. 将n除以k的余数赋给m
	c. q除以b减去a，并将结果赋给p
	d. a与b之和减去c与d的乘积，并将结果赋给x

	a. x = x-1			b. m = n % k		c. x = q/b - a		d. x = （a +b) - c*d
答案：c. p = q/(b-a)	 	其他略。
	















