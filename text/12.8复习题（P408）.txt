1. 哪些类别的变量可以成为它所在函数的局部变量？
    块作用域，函数作用域，函数原型作用域的变量可以成为它所在函数的局部变量。

2. 哪些类别的变量在它所在程序的运行期间一直存在？
    文件作用域，静态储存期的变量会在其程序运行期间一直存在。

3. 哪些类别的的变量可以被多个文件使用？哪些类别的变量仅限于在一个文件中使用？
    外部链接类型的变量可以被多个文件使用，内部链接类型的变量仅限于一个文件内使用。

4. 块作用域变量具有什么链接属性？
    无链接。
    
5. extern关键字有什么用途？
    在函数外定义，可以声明变量在另一个文件内已定义，此处只是引用是声明。
    在函数内使用extern关键词显式地表明此变量为文件作用域变量。
    
6. 考虑下面两行代码，就输出的结果而言有何异同？
    int * p1 = (int *) malloc(100 * sizeof(int));
    int * p1 = (int *) calloc(100, size(of));
7. 下面的变量对哪些函数可见？程序是否有误？
    /*文件1*/
    int daisy;
    int main(void)
    {
        int lily;
        ...;
    }
    int petal()
    {
        extern int daisy, lily;
        ...;
    }

    /*文件2*/
    extern int daisy;
    static int lily;
    int rose;
    int stem()
    {
        int rose;
        ...;
    }
    void root()
    {
        ...;
    }

8. 下面的程序会打印什么？
    #include <stdio.h>
    char color = 'B';
    void first(void);
    void second(void);

    int main(void)
    {
        extern char color;

        printf("color in main() is %c\n", color);
        first();
        printf("color in main() is %c\n", color);
        second();
        printf("color in main() is %c\n", color);
        return 0;
    }

    void first(void)
    {
        char color;

        color = 'R';
        printf("color in first() is %c\n", color);
    }

    void second(void)
    {
        color = 'G';
        printf("color in second() is %c\n", color);
    }

9. 假设文件的开始处有如下声明：
    static int plink;
    int value_ct(const int arr[], int value, int n);

    a. 以上声明表明了程序员的什么意图？
    b. 用const int value和const int n分别替换int value和int n，是否对主调程序的值加强保护。