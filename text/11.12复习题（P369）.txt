1. 下面字符串的声明有什么问题？
    int 略。            //答案和我写的一样，懒得再打一遍了。
       ...
    }

    将字符串作为数组初始化时，应把最后一个元素初始化为空字符\0.

    答案：
    如果希望得到一个字符串，初始化列表中应包含'\0'。当然，也可以用另一种语法自动添加空格：
    char name[] = "Fess";


2. 下面的程序会打印什么？
    #include <stdio.h>
    int main(void)
    {
        char note[] = "See you at the snack bar.";
        char * ptr;

        ptr = note;
        puts(ptr);
        puts(++ptr);
        note[7] = '\0';
        puts(note);
        puts(++ptr);                //此处是++ptr
        return 0
    }

    打印如下：
    See you at the snack bar.
    ee you at the snack bar.
    See you
    ee you

    答案：
    See you at the snack bar.
    ee you at the snack bar.
    See you
    e you               //以上有注释的地方是++ptr，不是++note

3. 下面的程序会打印什么？
    #include <stdio.h>
    #include <string.h>
    int main(void)
    {
        char food [] = "Yummy";
        char * ptr;

        ptr = food + strlen(food);
        while (--ptr >= food)
            puts(ptr);
        return 0;
    }

    打印如下：
    y
    m
    m
    u
    Y                   //这是strlen不包括空字符的情况          
                        //事实证明，strlen()不包括空字符 所以ptr+strlen(ptr)指向空字符

    答案：
    y
    my
    mmy
    ummy
    Yummy               //从指针指向的字符到空字符！大意了！


4. 下面的程序会打印什么？
    #include <stdio.h>
    #include <string.h>
    int main(void)
    {
        char goldwyn[40] = "art of it all ";
        char samuel [40] = "I read p";
        const char * quote = "the way through.";

        strcat(goldwyn, quote);
        strcat(samuel, goldwyn);
        puts(samuel);
        return 0;
    }

    打印如下：
    I read part of it all the way through.
    
    答案：
    略。


5. 下面的练习涉及字符串、循环、指针和递增指针。首先，假设定义了下面的函数：
    #include <stdio.h>
    char *pr(char *str)
    {
        char *pc;

        pc = str;
        while (*pc)
            putchar(*pc++);
        do {
            putchar(*--pc);
            } while (pc - str);
        return (pc);
    }
    考虑下面的函数调用：
    x = pr("Ho Ho Ho!");
    
    a. 将打印什么？
    b. x是什么类型？
    c. x的值是什么？
    d. 表达式*--pc是什么意思？与--*pc有何不同？
    e. 如果用*pc--替换*--pc，会打印什么?
    f. 两个while循环用来测试什么？
    g. 如果pr()函数的参数是空字符串，会怎样？
    h. 必须在主调函数中做什么，才能让pr()函数正常运行？

    a. Ho Ho Ho!oH oH oH
    b. x是指向char类型的指针
    c. x的值是str字符串首字符的地址
    d. *--pc表示当前指向字符在字符串中的前一个字符，--*pc是pc指向的字符在ASCII码中的前一个字符
    e. Ho Ho Ho!!oH oH o
    f. 我咋知道这个屎一般的代码想表达什么东西
    g. do {putchar(*--pc)}输出一个不确定的值，此时指针pc指向空字符串地址前一个char类型长度的地址，且函数返回这个地址
    h. 检测输入pr()的参数不是空字符串

    答案：
    e. //在两个!之间有一个空字符，但是通常该字符不会产生任何打印的效果。
    f. while (*pc)检查pc是否指向一个空字符（即，是否指向字符串的末尾）。while的测试条件中使用储存在指针指向位置上的值。
    while (pc - str)检查pc是否与str指向相同的位置（即，字符串的开头）。while的测试条件中使用储存在指针指向位置上的值。
    g. 进入第1个while循环后，pc指向空字符。进入第2个while循环后，它指向空字符前面的储存区（即，str所指向位置前面的位置）。
    把该字节解释成一个字符，并打印这个字符。然后指针退回到前面的自接触。永远都不会满足结束条件（pc == str），所以这个过程
    会一直持续下去。
    h. 必须在主调函数中声明pr(): char * pr(char *);


6. 假设有如下声明：
    char sign = '$';
    sign占用多少字节的内存？'$'占用多少字节的内存？"$"占用多少字节的内存？

    sign占用一个char类型的内存（4字节），'$'占用一个char类型的内存（4字节），"$"占用两个char类型的内存（8字节）

    答案：
    字符变量占用一个字节，所以sign占1字节。但是字符常量储存为int类型，意思是'$'通常占用2或4字节。但是实际上只
    使用int的1字节储存'$'的编码。字符串"$"使用2字节：一个字节储存'$'的编码，一个字节储存的'\0'编码。


7. 下面的程序会打印出什么？
    #include <stdio.h>
    #include <string.h>
    #define M1 "How are ya, sweetie?"
    char M2[40] = "Beat the clock.";
    char * M3 = "chat";
    int main(void)
    {
        char words[80];
        printf(M1);
        puts(M1);
        puts(M2);
        puts(M2 + 1);
        strcpy(words, M2);
        strcat(words, " Win a toy.");
        puts(words);
        words[4] = '\0';
        puts(words);
        while (*M3)
            puts(M3++);
        puts(--M3);
        puts(--M3);
        M3 = M1;
        puts(M3);
        return 0;
    }

    打印如下：
    How are ya, sweetie? How are ya, sweetie? 
    Beat the clock.
    eat the clock.
    Beat the clock. Win a toy.
    Beat
    chat
    hat
    at
    t
    t
    at
    How are ya, sweetie? 

    答案：
    略。


8. 下面的程序会打印出什么？
    #include <stdio.h>
    int main(void)
    {
        char str1 [] = "gawsie";
        char str2 [] = "bletonism";
        char *ps;
        int i = 0;
        for (ps = str1; *ps != '\0'; ps++) {

            if (*ps == 'a' || *ps = 'e')
                putchar(*ps);
            else
                (*ps)--;
            putchar(*ps);
        }
        putchar('\n');
        while (str2[i] != '\0') {
            printf("%c", i % 3 ? str2[i] : '*');            // i % 3 意思是 i % 3 == 0
            ++i;
        }
        return 0;
    }

    打印如下：
    faavrhee
    *le*on*sm

    答案：
    略。


9. 本章定义的s_gets()函数，用指针表示法代替数组表示法便可减少一个变量i。请改写该函数。
    char * s_gets(char * st, int n)
    {
        char * ret_val;
        
        ret_val = fgets(st, n, stdin);
        if (ret_val)
        {
            while (*st != '\n' && *st != '\0')
                st++;
            if (*st == '\n')
                *st = '\0';
            else
                while (getchar() != '\n')
                    continue;
        }

        return ret_val;
    }
    
    答案:
    略。            //答案和我写的一样，懒得再打一遍了。


10. strlen()函数接受一个指向字符串的指针作为参数，并返回该字符串的长度。请编写一个这样的函数。
    int StrLen(char * string)
    {
        int count = 0;
        while (*string != '\0')
            count++;
        return count;
    }

    答案：
    略。            //答案抄袭我。


11. 本章定义的s_gets()函数，可以用strchar()函数代替其中的while循环来查找换行符。请改写该函数。
    char * s_gets(char * st, int n)
    {
        char * ret_val;
        int i = 0;
        char * ptrtr;

        ret_val = fgets(st, n, stdin);
        if (ret_val)
        {
            ptrtr = strchr(st, '\n');
            *ptrtr = '\0';
            while (*(ptrtr+1)++ != '\n')
                getchar();
        }
        return ret_val;
    }

    答案：
    下面是一种方案：
    #include <stdio.h>
    #include <string.h>
    char * s_gets(char * st, int n)
    {
        char * ret_val;
        char * find;
        ret_val = fgets(st, n, stdin);
        if (ret_val)
        {
            find = strchr(st, '\n');            //查找换行符
            if (find)                           //如果地址不是NULL
                *find = '\0';                   //在此处放置一个空字符
            else
                while (getchar() != '\n')
                    continue;
        }
        return ret_val;
    }


12. 设计一个函数，接受一个指向字符串的指针，返回一个指向该字符串第一个空格字符的指针，或如果未找到空格字符，则返回空指针。
    char * get_blank(char * string)
    {
        char * ret_val;
        int i;
        for (i = 0; i < strlen(string); i++)
        {
            if (isspace(string[i]))
            {
                ret_val = &string[i];
                return ret_val;
            }
        }
        return NULL;
    }

    答案：
    下面是一种方案：
    #include <stdio.h>
    char * strblk(char * string)
    {
        wihle (*string != ' ' && *string != '\0')
            string++;
        if (*string == '\0')
            return NULL;
        else
            return string;
    }
    下面是第2种方案，可以防止函数修改字符串，但是允许使用返回值改变字符串。表达式(char *) string 被称为
    “通过强制类型转换取消const”。
    #include <stdio.h>
    char * strblk(const char * string)
    {
        while (*string != ' ' && *string != '\0')
            string++;
        if (*string == '\0');
            return NULL;
        else 
            return (char *)string;
    }


13. 重写程序清单11.21，使用ctype.h头文件中的函数，以便无论用户选择大写还是小写， 该程序都能正确识别答案。
    #include <stdio.h>
    #include <string.h>
    #include <ctype.h>
    #define ANSWER "GRANT"
    #define SIZE 40
    char * s_gets_n_toupper(char * st, int n);

    int main(void)
    {
        char try[SIZE];

        puts("Who is buried in Grant's tomb?");
        s_gets_n_toupper(try, SIZE);
        while (strcmp(try, ANSWER))
        {
            puts("No, that's wrong. Try again.");
            s_gets_n_toupper(try, ANSWER);
        }
        puts("That's right");

        return 0;
    }

    char * s_gets_n_toupper(char * st, int n)
    {
        char * ret_val;
        int i = 0;

        ret_val = fgets(st, n, stdin);
        if (ret_val)
        {
            while (st[i] != '\n' && st[i] != '\0')
                i++;
            if (st[i] == '\n')
                st[i] = '\0';
            else 
                while (getchar() = '\n')
                    continue;
        }

        for (i = 0; i < n; i++)
            toupper(st[i]);

        return ret_val;
    }

    答案：
    下面是一种方案：
    #include <stdio.h>
    #include <string.h>
    #include <ctype.h>
    #define ANSWER "GRANT"
    #define SIZE 40
    char * s_gets(char *st, int n);
    void ToUpper(char *st);

    int main(void)
    {
        char try[SIZE];
        puts("Who is buried in Grant's tomb?");
        s_gets(try, ANSWER);
        ToUpper(try);
        while (strcmp(try, ANSWER) != 0)
        {
            puts("No, that's wrong. Try again.");
            s_gets(try, ANSWER);
            ToUpper(try);
        }
        puts("That's right!");
        return 0;
    }

    void ToUpper(char * str)
    {
        while (*str != '\0')
        {
            *str = toupper(*str);
            str++;
        }
    }

    char *s_gets(har * st, int n)
    {
        char * ret_val;
        int i = 0;

        ret_val = fgets(st, n, stdin);
        if (ret_val)
        {
            while (st[i] != '\n' && st[i] != '\0')
                i++;
            if (st[i] == '\n')
                st[i] = '\0';
            else
                while (getchar() != '\n')
                    continue;
        }
        return ret_val;
    }
    //其实跟我写的差不多，但是我觉得我写的更好，反正修改一个函数就能直接获取全部大写的字符串
    //当然了，其实用strcmpi更好
    //要求再多一点的话，strstr配合strcmpi可以判断答案包不包括在输入里，而且不管大小写。