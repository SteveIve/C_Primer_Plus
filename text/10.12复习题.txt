1. 下面的程序将打印什么内容？
    #include <stdio.h>
    int main(void)
    {
        int ref[] = { 8, 4, 0, 2 };
        int *ptr;
        int index;

        for (index = 0, ptr = ref; index < 4; index++, ptr++)
            printf("%d %d\n", ref[index], *ptr);
        
        return 0;
    }

将打印以下内容：
    8 8
    4 4
    0 0
    2 2

答案：略。


2. 在复习题1中，ref有多少个元素？

有4个元素。

答案：略


3. 在复习题1中，ref的地址是什么？ref + 1 是什么意思？++ref指向什么？

ref的地址是ref数组中首元素的地址，ref + 1 是首元素后一个元素的地址，++ref指向当前元素的后一个元素。

答案：数组名ref只想该数组的首元素（整数8）。表达式ref + 1指向该数组的第2个元素（整数4）。
++ref不是有效的表达式，因为ref是一个常量，不是变量。


4. 在下面的代码中，*ptr和*(ptr+2)的值分别是什么？
    a.
    int *ptr;
    int torf[2][2] = {12, 14, 16};
    ptr = torf[0];
    b.
    int (*ptr)[2];
    int fort[2][2] = { {12}, {14, 16} };
    ptr = fort[0];

    a. *ptr = 12; *(ptr + 2) = 16;
    b. *ptr = 12; *(ptr + 2) = 14;

    答案：
    ptr指向第1个元素，ptr+2指向第3个元素（即第2行的第1个元素）。
    a. 12和16.
    b. 12和14（初始化列表中，用花括号把12括起来，把14和16括起来，所以12初始化第1个行的第1个元素，而14初始化第2行的第1个元素）。


5. 在下面的代码中，**ptr和**(ptr + 1)的值分别是什么？
    a.
    int (*ptr)[2];
    int torf[2][2] = {12, 14, 16};
    ptr = torf;
    b. 
    int (*ptr)[2];
    int fort[2][2] = { {12}, {14, 16}};
    ptr = fort;

    a. **ptr = 12; **(ptr + 1) = 16;
    b. **ptr = 12; **(ptr + 1) = 14;

    答案：
    ptr指向第1行，ptr+1指向第2行。*ptr指向第1行的第1个元素，而*(ptr+1)指向第2行的第1个元素。
    a. 12和16。
    b. 12和14（同第4题，12初始化第1行第1个元素，而14初始化第2行的第1个元素）。


6. 假设有下面的声明：
    int grid[30][100];
    a. 用1种写法表示grid[22][56]的地址
    b. 用2种写法表示grid[22][0]的地址
    c. 用3种写法表示grid[0][0]的地址

    a. *(grid + 22) + 100;
    b. I. *(grid + 22); II. grid[22][0];
    c. I. grid; II. *grid III. grid[0][0];

    答案：                              //题目问的地址，好死不死写什么值
    a. &grid[22][56]
    b. &grid[22][0]或grid[22]
    （grid[22]是一个内含100个元素的一维数组，因此它就是首元素grid[22][0]的地址）
    c. &grid[0][0]或grid[0]或(int *) grid
    (grid[0]是int类型元素grid[0][0]的地址，grid是内含100个元素的grid[0]的数组的地址。
    这两个地址的数值相同，但是类型不同，可以用强制类型转换把它们转换成相同的类型。)

    
7. 正确声明以下各变量：
    a. digits是一个内含10个int类型值的数组
    b. rates是一个内含6个float类型值的数组
    c. mat是一个内含3个元素的数组，每个元素都是内含5个整数的数组
    d. psa是一个内含20个元素的数组，每个元素都是指向int的指针
    e. pstr是一个指向数组的指针，该数组内含20个char类型的值

    a. int digits[10];
    b. float rates[6];
    c. int mat[3][5];
    d. int *(psa[20]);
    e. char pstr = chartype[20];

    答案： 
    d. char * psa[20];
    注意，[]比*的优先级高，所以在没有圆括号的情况下，psa先与[20]结合，然后再与*结合。
    因此该声明与char * (psa[20]);相同。
    e. char (*pstr)[20];
    注意，对第e小题而言，char *pstr[20]不正确。这会让pstr成为一个指针数组，而不是
    一个指向数组的指针。具体地说，如果使用该声明，pstr就指向一个char类型的值（即数组
    的第1个成员），而pstr+1则指向下一个字节。使用正确的声明，pstr是一个变量，而不是一个数组名。
    而且pstr+1指向起始字节后面的第20个字节。
    

8. 
    a. 声明一个内含6个int类型值的数组，并初始化各元素为1、2、5、8、16、32
    b. 用数组表示法表示a声明的数组的第3个元素（其值为4）
    c. 假设编译器支持C99/C11标准，声明一个内含100个int类型值的数组，并初始化最后一个元素为-1，其他元素不考虑
    d. 假设编译器支持C99/C11标准，声明一个内含100个int类型值的数组，并初始化下标为5、10、11、12、3的元素为101，其他元素不考虑

    a. int arr[6] = {1, 2, 4, 8, 16, 32};
    b. ar[2];
    c. int arr[100]; arr[99] = -1;
    d. int arr[100]; arr[5] = arr[10] =  arr[11] = arr[12] = arr[3] = 101;

    答案：
    c. int lots[100] = { [99] = -1 };
    d. int pots[100] = { [5] = 101, [10] = 101, 101, 101, [3] = 101 };


9. 内含10个元素的数组下标范围是什么？

    0~9
    
    答案： 略。

10. 假设有下面的声明：
    float rootbeer[10], things[10][5], *pf, value = 2.2;
    int i = 3;
    判断以下各项是否有效：
    a. rootbeer[2] = value;
    b. scanf("%f", &rootbeer);
    c. rootbeer = value;
    d. printf("%f", rootbeer);
    e. things[4][4] = rootbeer[3];
    f. things[5] = rootbeer;
    g. pf = value;
    h. pf = rootbeer;

    a. 无效
    b. 无效
    c. 无效
    d. 有效
    e. 无效
    f. 无效
    g. 无效
    h. 有效

    答案： 
    a. rootbeer[2] = value;有效。
    b. scanf("%f", &rootbeer);无效，rootbeer不是float类型。
    c. rootbeer = value;无效，rootbeer不是float类型。
    d. printf("%f", rootbeer);无效，rootbeer不是float类型。
    e. things[4][4] = rootbeer[3];有效。
    f. things[5] = rootbeer;无效，不能用数组赋值。
    g. pf = value;无效，value不是地址。
    h. pf = rootbeer;有效。


11. 声明一个800x600的int类型数组
    
    int arr[800][600];

    答案：略。


12. 下面声明了3个数组：                     //和函数调用，瞎了？？？
    double trots[20];
    short clops[10][30];
    long shorts[5][10][15];
    a. 分别以传统方式和以变长数组为参数的方式编写处理trots数组的void函数原型和函数调用
    b. 分别以传统方式和以变长数组为参数的方式编写处理clops数组的void函数原型和函数调用
    c. 分别以传统方式和以变长数组为参数的方式编写处理shots数组的void函数原型和函数调用

    a. 传统方式：void trots_dealer(double *trots[20]);         变长数组:void trots_dealer(int num, double *trots[num]);
    b. 传统方式：void clops_dealer(short *clops[10][30]);      变长数组:void clops_dealer(int num_a, int num_b, short *clops[num_a][num_b]);
    c. 传统方式：void shorts_dealer(long *shorts[5][10][15]);  变长数组:void shorts_dealer(int num_a, int num_b, int num_c, long *shorts[num_a][num_b][num_c]);

    答案： 
    a. 
    void process(double ar[], int n);
    void processvla(int n, double ar[n]);
    process(trots, 20);
    processvla(20, trots);
    b. 
    void process2(short ar2[30], int n);
    void process2vla(int n, int m, short ar2[n][m]);
    process2(clops, 10);
    process2vla(10, 30, clops);
    c. 
    void process3(long ar3[10][15], int n);
    void process3vla(int n, int m, int k, long ar3[n][m][k]);
    process3(shots, 5);
    process3vla(5, 10, 15, shots);


13. 下面有两个函数原型：
    void show(const doubble ar[], int int n);           //n是数组元素的个数
    void show2(const double ar2[][3], int n);           //n是二维数组的行数
    a. 编写一个函数调用，把一个内含8、3、9和2的复合函数字面量传递给show()函数。
    b. 编写一个函数调用，把一个2行3列的符合字面量（8、3、9作为第1行，5、4、1作为第2行）传递给show2()函数。

    a. show({ 8, 3, 9}, 2);
    b. show2({ {8, 3, 9}, {5, 4, 1}}, 2);

    答案： 
    a. 
    show( (int [4]) { 8, 3, 9, 2 }, 4);
    b. 
    show2( (int [][3]) { 8, 3, 9 }, { 5, 4, 1 }, 2);
    