1. 下面的结构模板有什么问题：
structure {
    char itable;
    int num[20];
    char * togs
}

    a. 结构类型的表示方法是struct而不是structure
    b. 没有给结构模板加上标签
    c. 最后一个成员char * togs最好加上分号;把。。

答案：
    正确的关键字是struct, 不是structure。该结构模板要在左花括号前面有一个标记，或者在右花括
    号后面有一个结构变量名。另外，*togs后面和模板结尾都少一个分号。


2. 下面都是程序的一部分，输出是什么？
#include <stdio.h>
struct house {
    float sqft;
    int rooms;
    int stories;
    char address[40];
};
int main(void)
{
    struct house fruzt = {1560.0, 6, 1, "22 Spiffo Road"};
    struct house *sign;

    sign = &fruzt;
    printf("%d %d\n", fruzt.rooms, sign->stories);
    printf("%s \n", fruzt.address);
    printf("%c %c\n", sign->address[3], fuzt.address[4]);
    return 0;
}

    输出内容如下：
    6 1
    22 Spiffo Road 
    S p

答案：略。


3. 设计一个结构模板储存一个月份名、该月份名的三个字母缩写、该月的天数以及月份号。
//月份号是个什么玩意
struct lunar {
    char month[10];
    char month_abb[5];
    int days;
    int number;
};

答案： 
struct month {
    char name[10];
    char abbrev[4];         //九月是Sept，加上空字符就不够了
    int days;
    int monumb;
};


4. 定义一个数组，内含12个结构（第三题的结构类型）并初始化为一个年份（非闰年）。
struct lunar year[12] = {
    {"January", "Jan", 31, 1},February March April May June July August September October November December
    {"February", "Feb", 28, 2},
    {"March", "Mar", 31, 3},
    {"April", "Apr", 30, 4},
    {"May", "May", 31, 5},
    {"June", "Jun", 30, 6},
    {"July", "Jul", 31, 7},
    {"August", "Aug", 31, 8},
    {"September", "Sept", 30, 9},
    {"October", "Oct", 31, 10},
    {"November", "Nov", 30, 11},
    {"December", "Dec", 31, 12}
};

答案：略。


5. 编写一个函数，用户提供月份号，该函数就返回一年中到该月为止的总天数。
int days(int mon_num)
{
    int total = 0;
    index = 0;
    while (index < num)
    {
        total += year[index].days;
        index++;
    }

    return total;
}

答案：
extern struct month months[];
int days(int month);
{
    int index, total;
    if (month < 1 || month > 12)
        return (-1);
    else 
    {
        for (index = 0, total = 0; index < month; index++)
            total += months[index].days;
        return (total);
    }
}
注意，index比月数小1，因为数组下标从0开始。然后，用index<month代替index<=month。


6. a. 假设有下面的typedef，声明一个内含10个指定结构的数组。然后，单独个成员赋值（或等价字
      符串），使第3个元素表示一个焦距长度有500mm，孔径为f/2.0的Remarkata镜头。
      typedef struct lens {
          float foclen;     //焦距长度
          float fstop;      //孔径
          char brand[30];   //品牌名称
      } LENS;

    b. 重写a, 在声明重使用一个待制定初始化器的初始化列表，而不是对每个成员单独赋值。

    a.
        LENS mylens[10] = {
            {18, 2.8, "Nikor"},
            {35, 1.4, "Nikor"},
            {500, 2.0, "Remarkata"},
            {50, 1.2, "Leica"},
            {70, 2.8, "Nikor"},
            {100, 1.4, "Sony"},
            {200, 1.4, "Sony"},
            {300, 1.4, "Nikor"},
            {400, 2.2, "Nikor"},
            {600, 2.8, "Nikor"},
        };

    b. 
        LENS mylens[10] = {[2] = {500, 2.0, "Remarkata"}};

答案：
    a. 要包含string.h头文件，提供strcpy()的原型：
       typedef struct lens {
           float foclen;
           float fstop;
           char brand [30];
       } LENS;

       LENS bigEye[10];
       bigEye[2].foclen = 500;
       bigEye[2].fstop = 2.0;
       strcpy(bigEye[2].brand, "Remarkatar");
    b. LENS bigEye[10] = { [2] = {500, 2.0, "Remarkatar"} };


7. 考虑下面程序片段：
    struct name {
        char first[20];
        char last[20];
    };
    struct bem {
        int limbs;
        struct name title;
        char type[30];
    };
    strcut bem * pb;
    strcut bem deb = {
        6,
        {"Berbnazel", "Gwolkapwolk"},
        "Arcturan"
    };
    pb = &deb;

    a. 下面的语句分别打印什么？
        printf("%d\n", deb.limbs);
        printf("%s\n", pb->type);
        printf("%s\n", pb->type + 2);       //狗日的+2还真就从第二个往后开始。
    b. 如何用结构表示法（两种方法）表示"Gwolkapwolk"？
    c. 编写一个函数，以bem结构的地址作为参数，并以下面的形式输出结构的内容（假定结构模板在一
       个名为starfolk.h的头文件中）：
       Berbnazel Gwolkapwolk is a 6-limbs Arcturan.
    
    a. 打印如下：
        6
        Arcturan
        cturan
    b. deb.title.last
       pb->title.last
       (*pb).title.last
    c. 
    #include <starfolk.h>           //自己写的头文件用"" 
    void showinfo(struct bem *pst)
    {
        printf("%s %s is a %d-limbs %s.\n", (*pst).title.first, (*pst).title.last,
                (*pst).limbs, (*pst).type);
    }

答案：
    a. 略。
    b. 比答案多写一个，叉会腰。
    c. 下面是一个版本：
        #include <stdio.h>
        #include "starfolk.h"       //让结构定义可用
        void probem(const struct bem * pbem)
        {
            printf("%s %s is a %d-limbs %s.\n", pbem->title.first, 
                    pbem->title.last, pbem->limbs, pbem->type);
        }


8. 考虑下面的声明：
    struct fullname {
        char fname[20];
        char lname[20];
    };
    strcut bard {
        strcut fullname name;
        int born; 
        int died;
    };
    strcut bard willie;
    strcut bard *pt = &willie;
    a. 用willie标识符标识willie结构的born成员。
    b. 用pt标识符标识willie结构的born成员。
    c. 调用scanf()读入一个用willie标识符标识的born成员的值。
    d. 调用scanf()读入一个用pt标识符标识的born成员的值。
    e. 调用scanf()读入一个用willie标识符标识的name成员中lname成员的值。
    f. 调用scanf()读入一个用pt标识符标识的name成员中lname成员的值。
    g. 构造一个标识符，表示willie结构变量所表示的姓名中名的第3个字母（英文的名在前面）
    h. 构造一个表达式，表示willie结构变量所表示的名和姓中的字母的总数。

    a. willie.born
    b. pt->born
    c. scanf("%d",&willie.born);
    d. scanf("%d", pt->born);
    e. scanf("%s", willie.name.lname);
    f. scanf("%s", pt->name.lname);
    g. char ch = willie.name.fname[3];
    h. int total = strlen(willie.name.fname) + strlen(willie.name.lanme);

答案：
    d. scanf("%d", &pt->born);
    g. willie.name.fname[2]         //fuck, 从0开始都能忘？
    

9. 定义一个结构模板以储存这些项：汽车名、马力、EPA（美国环保局）城市交通MPG（每加仑燃料
   行驶的英里数）评级、轴距和出场年份。使用car作为该模板的标记。
   struct car {
       char name[20];
       float horsepower;
       char MPG_rank;
       float wheelbase;
       int year_manufacture;
   };

10. 假设有如下结构：
    struct gas {
        float distance;
        float gals;
        float mpg;
    };
    a. 设计一个函数，接受struct gas类型的参数。假设传入的结构包含distance和gals信息。
       该函数为mpg成员计算正确的值，并把值返回该结构。
    b. 设计一个函数，接受struct gas类型的参数。假设传入的结构包含distance和gals信息。
       该函数为mpg成员计算正确的值，并把值赋给合适的成员。

    a. 
    float mpg_cal(struct gas car)
    {
        return (car.distance/car.gals);
    }
    b. 
    void mpg_cal_pt(strcut gas *car)
    {
        (*car).mpg = (*car).distance/(*car).gals;
    }

11. 声明一个choices的枚举，把枚举常量no、yes和maybe分别设置为0、1、2。
    enum choices = {no = 0, yes = 1, maybe = 2};

12. 声明一个指向函数的指针，该函数返回char的指针，接受一个指向char的指针和一个char类型的值。
    char * (*pfunc)(char * pt, char ch);

13. 声明4个函数，并初始化一个指向这些函数的指针数组。每个函数都接受两个double类型的参数，
    返回double类型的值。另外，用两种方法使用该数组调用带10.0和2.5实参的第2个函数。
    double func1(dobule x, double y);
    double func2(double x, double y);
    double func3(double x, double y);
    double func4(double x, double y);
    doubel (*pfunc[4]) (double, double) = [func1, func2, func3, func4];
    (*pfunc[1])(10.0, 2.5);
    pfunc[1](10.0, 2.5);